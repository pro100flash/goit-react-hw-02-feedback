{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Section/Section.js","components/Statistic/Statistic.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Notification","message","protoTypes","PropTypes","string","isRequired","Section","title","children","Statistic","good","neutral","bad","total","positivePersentage","App","state","Neutral","handleClick","e","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","positivePercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAuBeA,EApBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAEEC,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJX,SAMGE,GALIA,S,OCJPI,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KAE1CD,EAAaE,WAAa,CACxBD,Q,OAASE,EAAUC,OAAOC,YAGbL,QCKAM,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCeUC,EAlBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OAChB,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,SC6CZC,E,4MA/CbC,MAAQ,CACNN,KAAM,EACNO,QAAS,EACTL,IAAK,G,EAGPM,YAAc,SAACC,GACb,IAAMrB,EAAOqB,EAAEC,OAAOtB,KACtB,EAAKuB,UAAS,SAACL,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBlB,EAAO,EAAKkB,MAAMlB,GAAQ,Q,EAGnEwB,mBAAqB,kBAAM,EAAKN,MAAMN,KAAO,EAAKM,MAAMJ,K,EAExDW,gCAAkC,kBAChC,EAAKP,MAAMN,KACPc,KAAKC,MAAO,EAAKT,MAAMN,KAAO,EAAKY,qBAAwB,KAC3D,G,4CAEN,WACE,MAA+BI,KAAKV,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,qCACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAAC,EAAD,CACEd,QAASkC,OAAOC,KAAKF,KAAKV,OAC1BtB,gBAAiBgC,KAAKR,gBAIzBQ,KAAKJ,qBACJ,cAAC,EAAD,CAASf,MAAM,YAAf,SACE,cAAC,EAAD,CACEG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOa,KAAKJ,qBACZO,mBAAoBH,KAAKH,sCAI7B,cAAC,EAAD,CAActB,QAAQ,6B,GAzCd6B,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b8003fc3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {options.map((option) => (\r\n      <button\r\n        key={option}\r\n        type=\"button\"\r\n        name={option}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  option: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.protoTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePersentage }) => (\r\n  <>\r\n    <p>Good: {good}</p>\r\n    <p>Neutral: {neutral}</p>\r\n    <p>Bad: {bad}</p>\r\n    <p>Total: {total}</p>\r\n    <p>Positive feedback: {positivePersentage}</p>\r\n  </>\r\n);\r\n\r\nStatistic.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePersentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistic;\r\n","import React, { Component } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\nimport Section from \"./components/Section/Section\";\nimport Statistic from \"./components/Statistic/Statistic\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    Neutral: 0,\n    bad: 0,\n  };\n\n  handleClick = (e) => {\n    const name = e.target.name;\n    this.setState((state) => ({ ...state, [name]: this.state[name] + 1 }));\n  };\n\n  countTotalFeedback = () => this.state.good + this.state.bad;\n\n  countPositiveFeedbackPercentage = () =>\n    this.state.good\n      ? Math.round((this.state.good / this.countTotalFeedback()) * 100)\n      : 0;\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n\n        {this.countTotalFeedback() ? (\n          <Section title=\"Statistic\">\n            <Statistic\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}